{
  "id": 2,
  "slug": "add-two-numbers",
  "title": "Add Two Numbers",
  "tags": [
    "linked-list",
    "math",
    "recursion"
  ],
  "difficulty": "medium",
  "solutions": [
    {
      "name": "iterativeSolution",
      "description": "",
      "approach": "- Traverse both linked lists simultaneously\n - Add corresponding digits plus carry from previous addition\n - Create new node for each digit of the result\n - Handle different lengths by treating missing digits as 0",
      "timeComplexity": "O(max(m, n)) where m, n are lengths of the two lists",
      "spaceComplexity": "O(max(m, n)) for the result list",
      "code": "<pre class=\"shiki github-dark\" style=\"background-color: #24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">dummy</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> { val: </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">, next: </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #E1E4E8\"> } </span><span style=\"color: #F97583\">as</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">ListNode</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">let</span><span style=\"color: #E1E4E8\"> current </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> dummy;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">let</span><span style=\"color: #E1E4E8\"> carry </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">while</span><span style=\"color: #E1E4E8\"> (l1 </span><span style=\"color: #F97583\">||</span><span style=\"color: #E1E4E8\"> l2 </span><span style=\"color: #F97583\">||</span><span style=\"color: #E1E4E8\"> carry) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">sum</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> (l1?.val </span><span style=\"color: #F97583\">||</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">+</span><span style=\"color: #E1E4E8\"> (l2?.val </span><span style=\"color: #F97583\">||</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">+</span><span style=\"color: #E1E4E8\"> carry;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  carry </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> Math.</span><span style=\"color: #B392F0\">floor</span><span style=\"color: #E1E4E8\">(sum </span><span style=\"color: #F97583\">/</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">10</span><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  current.next </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> { val: sum </span><span style=\"color: #F97583\">%</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">10</span><span style=\"color: #E1E4E8\">, next: </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  current </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> current.next;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  l1 </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> l1?.next </span><span style=\"color: #F97583\">||</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  l2 </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> l2?.next </span><span style=\"color: #F97583\">||</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> dummy.next;</span></span></code></pre>",
      "utilities": [
        {
          "name": "ListNodeSchema",
          "code": "const ListNodeSchema: z.ZodType = z.lazy(\n  () =>\n    z.object({\n      val: z.number(),\n      next: z.union([ListNodeSchema, z.null()]),\n    })\n);"
        },
        {
          "name": "ListNode",
          "code": "type ListNode = z.infer<typeof ListNodeSchema>;"
        }
      ],
      "testResults": [
        {
          "input": [
            {
              "val": 2,
              "next": {
                "val": 4,
                "next": {
                  "val": 3,
                  "next": null
                }
              }
            },
            {
              "val": 5,
              "next": {
                "val": 6,
                "next": {
                  "val": 4,
                  "next": null
                }
              }
            }
          ],
          "expected": {
            "val": 7,
            "next": {
              "val": 0,
              "next": {
                "val": 8,
                "next": null
              }
            }
          },
          "name": "Example 1",
          "actual": {
            "val": 7,
            "next": {
              "val": 0,
              "next": {
                "val": 8,
                "next": null
              }
            }
          },
          "passed": true,
          "duration": 1.234958000000006
        },
        {
          "input": [
            {
              "val": 0,
              "next": null
            },
            {
              "val": 0,
              "next": null
            }
          ],
          "expected": {
            "val": 0,
            "next": null
          },
          "name": "Example 2",
          "actual": {
            "val": 0,
            "next": null
          },
          "passed": true,
          "duration": 0.03445899999996982
        },
        {
          "input": [
            {
              "val": 9,
              "next": {
                "val": 9,
                "next": {
                  "val": 9,
                  "next": {
                    "val": 9,
                    "next": {
                      "val": 9,
                      "next": {
                        "val": 9,
                        "next": {
                          "val": 9,
                          "next": null
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "val": 9,
              "next": {
                "val": 9,
                "next": {
                  "val": 9,
                  "next": {
                    "val": 9,
                    "next": null
                  }
                }
              }
            }
          ],
          "expected": {
            "val": 8,
            "next": {
              "val": 9,
              "next": {
                "val": 9,
                "next": {
                  "val": 9,
                  "next": {
                    "val": 0,
                    "next": {
                      "val": 0,
                      "next": {
                        "val": 0,
                        "next": {
                          "val": 1,
                          "next": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "name": "Example 3",
          "actual": {
            "val": 8,
            "next": {
              "val": 9,
              "next": {
                "val": 9,
                "next": {
                  "val": 9,
                  "next": {
                    "val": 0,
                    "next": {
                      "val": 0,
                      "next": {
                        "val": 0,
                        "next": {
                          "val": 1,
                          "next": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "passed": true,
          "duration": 0.023499999999899046
        }
      ],
      "totalTests": 3,
      "passedTests": 3,
      "failedTests": 0
    }
  ],
  "notes": "<ul>\n<li><ol start=\"2\">\n<li>Add Two Numbers</li>\n</ol>\n</li>\n<li></li>\n<li>Difficulty: medium</li>\n<li>Tags: linked-list, math, recursion</li>\n<li></li>\n<li>Description:</li>\n<li>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</li>\n<li></li>\n<li>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</li>\n<li></li>\n<li></li>\n<li>Example 1:</li>\n<li></li>\n<li></li>\n<li>Input: l1 = [2,4,3], l2 = [5,6,4]</li>\n<li>Output: [7,0,8]</li>\n<li>Explanation: 342 + 465 = 807.</li>\n<li></li>\n<li></li>\n<li>Example 2:</li>\n<li></li>\n<li></li>\n<li>Input: l1 = [0], l2 = [0]</li>\n<li>Output: [0]</li>\n<li></li>\n<li></li>\n<li>Example 3:</li>\n<li></li>\n<li></li>\n<li>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</li>\n<li>Output: [8,9,9,9,0,0,0,1]</li>\n<li></li>\n<li>Constraints:</li>\n<li><ul>\n<li>The number of nodes in each linked list is in the range [1, 100].</li>\n</ul>\n</li>\n<li><ul>\n<li>0 &lt;= Node.val &lt;= 9</li>\n</ul>\n</li>\n<li><ul>\n<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n</li>\n</ul>\n",
  "totalTests": 3,
  "passedTests": 3,
  "failedTests": 0
}