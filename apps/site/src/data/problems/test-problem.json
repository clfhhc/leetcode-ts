{
  "id": 3,
  "slug": "test-problem",
  "title": "Test Problem",
  "tags": [
    "'array'",
    "'string'"
  ],
  "difficulty": "easy",
  "solutions": [
    {
      "name": "Solution",
      "description": "Solution implementation",
      "approach": "Add your approach here",
      "timeComplexity": "O()",
      "spaceComplexity": "O()",
      "code": "<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> (</span><span style=\"color: #D73A49\">...</span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">parsedArgs</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> inst._def.input </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\"> (</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">, parse_js_1.parse)(inst._def.input, args) </span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> args;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">result</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> Reflect.</span><span style=\"color: #6F42C1\">apply</span><span style=\"color: #24292E\">(func, </span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">, parsedArgs);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (inst._def.output) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">, parse_js_1.parse)(inst._def.output, result);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> result;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span></code></pre>",
      "testResults": [
        {
          "input": [
            "hello"
          ],
          "expected": 5,
          "name": "Example 1",
          "actual": 5,
          "passed": true,
          "duration": 0.05566699999997127
        },
        {
          "input": [
            "world"
          ],
          "expected": 5,
          "name": "Example 2",
          "actual": 5,
          "passed": true,
          "duration": 0.09662500000001728
        }
      ],
      "totalTests": 2,
      "passedTests": 2,
      "failedTests": 0
    }
  ],
  "notes": "<ul>\n<li><ol start=\"3\">\n<li>Test Problem</li>\n</ol>\n</li>\n<li></li>\n<li>Difficulty: easy</li>\n<li>Tags: &#39;array&#39;, &#39;string&#39;</li>\n<li></li>\n<li>Description:</li>\n<li>Add problem description here</li>\n<li></li>\n<li>Constraints:</li>\n<li><ul>\n<li>Add constraints here</li>\n</ul>\n</li>\n<li></li>\n<li>Follow-up:</li>\n<li><ul>\n<li>Add follow-up questions here (if any)</li>\n</ul>\n</li>\n</ul>\n",
  "totalTests": 2,
  "passedTests": 2,
  "failedTests": 0
}