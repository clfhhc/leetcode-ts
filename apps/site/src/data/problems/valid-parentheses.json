{
  "id": 20,
  "slug": "valid-parentheses",
  "title": "Valid Parentheses",
  "tags": [
    "string",
    "stack"
  ],
  "difficulty": "easy",
  "solutions": [
    {
      "name": "solution",
      "description": "",
      "approach": "- Use a stack to store the opening parentheses\n - For each closing parenthesis, check if the stack is empty or the top of the stack is the corresponding opening parenthesis\n - If it is, pop the stack; otherwise, return false\n - If the stack is empty at the end, return true; otherwise, return false",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "code": "<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">solution</span> = (<span class=\"hljs-params\">s</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> matching = {\n    <span class=\"hljs-string\">&#x27;)&#x27;</span>: <span class=\"hljs-string\">&#x27;(&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;]&#x27;</span>: <span class=\"hljs-string\">&#x27;[&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;}&#x27;</span>: <span class=\"hljs-string\">&#x27;{&#x27;</span>,\n  };\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">stack</span>: (<span class=\"hljs-string\">&#x27;(&#x27;</span> | <span class=\"hljs-string\">&#x27;[&#x27;</span> | <span class=\"hljs-string\">&#x27;{&#x27;</span>)[] = [];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">const</span> char = s[i];\n    <span class=\"hljs-keyword\">if</span> (char === <span class=\"hljs-string\">&#x27;(&#x27;</span> || char === <span class=\"hljs-string\">&#x27;[&#x27;</span> || char === <span class=\"hljs-string\">&#x27;{&#x27;</span>) {\n      stack.<span class=\"hljs-title function_\">push</span>(char);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (stack.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span> || stack.<span class=\"hljs-title function_\">pop</span>() !== matching[char]) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> stack.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>;\n};\n</code></pre>",
      "utilities": [],
      "testResults": [
        {
          "input": [
            "()"
          ],
          "expected": true,
          "name": "Example 1",
          "actual": true,
          "passed": true,
          "duration": 0.09620800000004692
        },
        {
          "input": [
            "()[]{}"
          ],
          "expected": true,
          "name": "Example 2",
          "actual": true,
          "passed": true,
          "duration": 0.0071659999999837964
        },
        {
          "input": [
            "(]"
          ],
          "expected": false,
          "name": "Example 3",
          "actual": false,
          "passed": true,
          "duration": 0.00745900000003985
        },
        {
          "input": [
            "([])"
          ],
          "expected": true,
          "name": "Example 4",
          "actual": true,
          "passed": true,
          "duration": 0.0050420000000030996
        },
        {
          "input": [
            "([)]"
          ],
          "expected": false,
          "name": "Example 5",
          "actual": false,
          "passed": true,
          "duration": 0.0015000000000782165
        }
      ],
      "totalTests": 5,
      "passedTests": 5,
      "failedTests": 0
    }
  ],
  "notes": "<ul>\n<li><ol start=\"20\">\n<li>Valid Parentheses</li>\n</ol>\n</li>\n<li></li>\n<li>Difficulty: easy</li>\n<li>Tags: string, stack</li>\n<li></li>\n<li>Description:</li>\n<li>Given a string <code>s</code> containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</li>\n<li></li>\n<li>An input string is valid if:</li>\n<li></li>\n<li><ol>\n<li>Open brackets must be closed by the same type of brackets.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Open brackets must be closed in the correct order.</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ol>\n</li>\n<li></li>\n<li>Examples:</li>\n<li><ol>\n<li>Input: s = &quot;()&quot;</li>\n</ol>\n</li>\n<li>Output: true</li>\n<li><ol start=\"2\">\n<li>Input: s = &quot;()[]{}&quot;</li>\n</ol>\n</li>\n<li>Output: true</li>\n<li><ol start=\"3\">\n<li>Input: s = &quot;(]&quot;</li>\n</ol>\n</li>\n<li>Output: false</li>\n<li><ol start=\"4\">\n<li>Input: s = &quot;([])&quot;</li>\n</ol>\n</li>\n<li>Output: true</li>\n<li><ol start=\"5\">\n<li>Input: s = &quot;([)]&quot;</li>\n</ol>\n</li>\n<li>Output: false</li>\n<li></li>\n<li>Constraints:</li>\n<li><ul>\n<li><code>1 <= s.length <= 104</code></li>\n</ul>\n</li>\n<li><ul>\n<li><code>s</code> consists of parentheses only <code>'()[]{}'</code>.</li>\n</ul>\n</li>\n<li></li>\n</ul>\n",
  "totalTests": 5,
  "passedTests": 5,
  "failedTests": 0
}