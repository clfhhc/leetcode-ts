{
  "id": 1,
  "slug": "two-sum",
  "title": "Two Sum",
  "tags": [
    "array",
    "hash-table"
  ],
  "difficulty": "easy",
  "solutions": [
    {
      "name": "hashMapSolution",
      "description": "",
      "approach": "- Use a hash map to store number -> index mappings\n - For each number, check if its complement (target - number) exists in the map\n - If found, return the indices; otherwise, store current number and index",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "code": "<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">seen</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Map</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">for</span><span style=\"color: #24292E\"> (</span><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> i </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">; i </span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\"> nums.</span><span style=\"color: #005CC5\">length</span><span style=\"color: #24292E\">; i</span><span style=\"color: #D73A49\">++</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">num</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> nums[i];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">complement</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> target </span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\"> num;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (seen.</span><span style=\"color: #6F42C1\">has</span><span style=\"color: #24292E\">(complement)) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> [seen.</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">(complement), i];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  seen.</span><span style=\"color: #6F42C1\">set</span><span style=\"color: #24292E\">(num, i);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> [];</span></span></code></pre>",
      "testResults": [
        {
          "input": [
            [
              2,
              7,
              11,
              15
            ],
            9
          ],
          "expected": [
            0,
            1
          ],
          "name": "Example 1",
          "actual": [
            0,
            1
          ],
          "passed": true,
          "duration": 0.21445899999997664
        },
        {
          "input": [
            [
              3,
              2,
              4
            ],
            6
          ],
          "expected": [
            1,
            2
          ],
          "name": "Example 2",
          "actual": [
            1,
            2
          ],
          "passed": true,
          "duration": 0.12375000000000114
        },
        {
          "input": [
            [
              3,
              3
            ],
            6
          ],
          "expected": [
            0,
            1
          ],
          "name": "Example 3",
          "actual": [
            0,
            1
          ],
          "passed": true,
          "duration": 0.006957999999997355
        },
        {
          "input": [
            [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10
            ],
            19
          ],
          "expected": [
            8,
            9
          ],
          "name": "Large array case",
          "actual": [
            8,
            9
          ],
          "passed": true,
          "duration": 0.015291999999988093
        },
        {
          "input": [
            [
              -1,
              -2,
              -3,
              -4,
              -5,
              -6,
              -7,
              -8,
              -9,
              -10
            ],
            -19
          ],
          "expected": [
            8,
            9
          ],
          "name": "Negative numbers case",
          "actual": [
            8,
            9
          ],
          "passed": true,
          "duration": 0.15987499999999955
        },
        {
          "input": [
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            0
          ],
          "expected": [
            0,
            1
          ],
          "name": "Zero case",
          "actual": [
            0,
            1
          ],
          "passed": true,
          "duration": 0.08291699999998059
        }
      ],
      "totalTests": 6,
      "passedTests": 6,
      "failedTests": 0
    },
    {
      "name": "twoPointersSolution",
      "description": "",
      "approach": "- Sort the array\n - Use two pointers to find the two numbers\n - If the sum of the two numbers is equal to the target, return the indices; otherwise, move the pointers",
      "timeComplexity": "O(n log n)",
      "spaceComplexity": "O(1)",
      "code": "<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">sortedNums</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> nums.</span><span style=\"color: #6F42C1\">slice</span><span style=\"color: #24292E\">().</span><span style=\"color: #6F42C1\">sort</span><span style=\"color: #24292E\">((</span><span style=\"color: #E36209\">a</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">b</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> a </span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\"> b);</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> left </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> right </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> sortedNums.</span><span style=\"color: #005CC5\">length</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">while</span><span style=\"color: #24292E\"> (left </span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\"> right) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">sum</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> sortedNums[left] </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> sortedNums[right];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (sum </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> target) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (sortedNums[left] </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> sortedNums[right]) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">index</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> nums.</span><span style=\"color: #6F42C1\">indexOf</span><span style=\"color: #24292E\">(sortedNums[left]);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        nums.</span><span style=\"color: #6F42C1\">indexOf</span><span style=\"color: #24292E\">(sortedNums[left]),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        nums.</span><span style=\"color: #6F42C1\">indexOf</span><span style=\"color: #24292E\">(sortedNums[right], index </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      ];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">index1</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> nums.</span><span style=\"color: #6F42C1\">indexOf</span><span style=\"color: #24292E\">(sortedNums[left]);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">index2</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> nums.</span><span style=\"color: #6F42C1\">indexOf</span><span style=\"color: #24292E\">(sortedNums[right]);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> index1 </span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\"> index2 </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\"> [index1, index2] </span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> [index2, index1];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (sum </span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\"> target) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    left</span><span style=\"color: #D73A49\">++</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  } </span><span style=\"color: #D73A49\">else</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    right</span><span style=\"color: #D73A49\">--</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> [];</span></span></code></pre>",
      "testResults": [
        {
          "input": [
            [
              2,
              7,
              11,
              15
            ],
            9
          ],
          "expected": [
            0,
            1
          ],
          "name": "Example 1",
          "actual": [
            0,
            1
          ],
          "passed": true,
          "duration": 0.06895900000000665
        },
        {
          "input": [
            [
              3,
              2,
              4
            ],
            6
          ],
          "expected": [
            1,
            2
          ],
          "name": "Example 2",
          "actual": [
            1,
            2
          ],
          "passed": true,
          "duration": 0.0050420000000030996
        },
        {
          "input": [
            [
              3,
              3
            ],
            6
          ],
          "expected": [
            0,
            1
          ],
          "name": "Example 3",
          "actual": [
            0,
            1
          ],
          "passed": true,
          "duration": 0.005124999999992497
        },
        {
          "input": [
            [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10
            ],
            19
          ],
          "expected": [
            8,
            9
          ],
          "name": "Large array case",
          "actual": [
            8,
            9
          ],
          "passed": true,
          "duration": 0.012791999999990367
        },
        {
          "input": [
            [
              -1,
              -2,
              -3,
              -4,
              -5,
              -6,
              -7,
              -8,
              -9,
              -10
            ],
            -19
          ],
          "expected": [
            8,
            9
          ],
          "name": "Negative numbers case",
          "actual": [
            8,
            9
          ],
          "passed": true,
          "duration": 0.013249999999999318
        },
        {
          "input": [
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            0
          ],
          "expected": [
            0,
            1
          ],
          "name": "Zero case",
          "actual": [
            0,
            1
          ],
          "passed": true,
          "duration": 0.0074580000000139535
        }
      ],
      "totalTests": 6,
      "passedTests": 6,
      "failedTests": 0
    }
  ],
  "notes": "<ul>\n<li><ol>\n<li>Two Sum</li>\n</ol>\n</li>\n<li></li>\n<li>Difficulty: easy</li>\n<li>Tags: array, hash-table</li>\n<li></li>\n<li>Description:</li>\n<li>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</li>\n<li></li>\n<li>You may assume that each input would have exactly one solution, and you may not use the same element twice.</li>\n<li></li>\n<li>You can return the answer in any order.</li>\n<li></li>\n<li></li>\n<li>Example 1:</li>\n<li></li>\n<li></li>\n<li>Input: nums = [2,7,11,15], target = 9</li>\n<li>Output: [0,1]</li>\n<li>Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</li>\n<li></li>\n<li></li>\n<li>Example 2:</li>\n<li></li>\n<li></li>\n<li>Input: nums = [3,2,4], target = 6</li>\n<li>Output: [1,2]</li>\n<li></li>\n<li></li>\n<li>Example 3:</li>\n<li></li>\n<li></li>\n<li>Input: nums = [3,3], target = 6</li>\n<li>Output: [0,1]</li>\n<li></li>\n<li>Constraints:</li>\n<li><ul>\n<li>2 &lt;= nums.length &lt;= 104</li>\n</ul>\n</li>\n<li><ul>\n<li>-109 &lt;= nums[i] &lt;= 109</li>\n</ul>\n</li>\n<li><ul>\n<li>-109 &lt;= target &lt;= 109</li>\n</ul>\n</li>\n<li><ul>\n<li>Only one valid answer exists.</li>\n</ul>\n</li>\n<li></li>\n<li>Follow-up:</li>\n<li><ul>\n<li>Can you come up with an algorithm that is less than O(n2) time complexity?</li>\n</ul>\n</li>\n</ul>\n",
  "totalTests": 12,
  "passedTests": 12,
  "failedTests": 0
}