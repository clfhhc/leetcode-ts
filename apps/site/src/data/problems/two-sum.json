{
  "id": 1,
  "slug": "two-sum",
  "title": "Two Sum",
  "tags": ["array", "hash-table"],
  "difficulty": "easy",
  "solutions": [
    {
      "name": "Solution",
      "description": "Solution implementation",
      "approach": "Add your approach here",
      "timeComplexity": "O()",
      "spaceComplexity": "O()",
      "code": "<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> (</span><span style=\"color: #D73A49\">...</span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">parsedArgs</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> inst._def.input </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\"> (</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">, parse_js_1.parse)(inst._def.input, args) </span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> args;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">result</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> Reflect.</span><span style=\"color: #6F42C1\">apply</span><span style=\"color: #24292E\">(func, </span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">, parsedArgs);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (inst._def.output) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">, parse_js_1.parse)(inst._def.output, result);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> result;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span></code></pre>",
      "testResults": [
        {
          "input": [[2, 7, 11, 15], 9],
          "expected": [0, 1],
          "name": "Example 1",
          "actual": [0, 1],
          "passed": true,
          "duration": 0.21975000000000477
        },
        {
          "input": [[3, 2, 4], 6],
          "expected": [1, 2],
          "name": "Example 2",
          "actual": [1, 2],
          "passed": true,
          "duration": 0.026709000000010974
        },
        {
          "input": [[3, 3], 6],
          "expected": [0, 1],
          "name": "Example 3",
          "actual": [0, 1],
          "passed": true,
          "duration": 0.08416700000000787
        }
      ],
      "totalTests": 3,
      "passedTests": 3,
      "failedTests": 0
    }
  ],
  "notes": "<ul>\n<li><ol>\n<li>Two Sum</li>\n</ol>\n</li>\n<li></li>\n<li>Difficulty: easy</li>\n<li>Tags: array, hash-table</li>\n<li></li>\n<li>Description:</li>\n<li><ul>\n<li>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</li>\n</ul>\n</li>\n<li></li>\n<li>You may assume that each input would have exactly one solution, and you may not use the same element twice.</li>\n<li></li>\n<li>You can return the answer in any order.</li>\n<li></li>\n<li></li>\n<li>Example 1:</li>\n<li></li>\n<li></li>\n<li>Input: nums = [2,7,11,15], target = 9</li>\n<li>Output: [0,1]</li>\n<li>Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</li>\n<li></li>\n<li></li>\n<li>Example 2:</li>\n<li></li>\n<li></li>\n<li>Input: nums = [3,2,4], target = 6</li>\n<li>Output: [1,2]</li>\n<li></li>\n<li></li>\n<li>Example 3:</li>\n<li></li>\n<li></li>\n<li>Input: nums = [3,3], target = 6</li>\n<li>Output: [0,1]</li>\n<li></li>\n<li>Constraints:</li>\n<li><ul>\n<li>2 &lt;= nums.length &lt;= 104</li>\n</ul>\n</li>\n<li><ul>\n<li>-109 &lt;= nums[i] &lt;= 109</li>\n</ul>\n</li>\n<li><ul>\n<li>-109 &lt;= target &lt;= 109</li>\n</ul>\n</li>\n<li><ul>\n<li>Only one valid answer exists.</li>\n</ul>\n</li>\n<li></li>\n<li>Follow-up:</li>\n<li><ul>\n<li>Can you come up with an algorithm that is less than O(n2) time complexity?</li>\n</ul>\n</li>\n</ul>\n",
  "totalTests": 3,
  "passedTests": 3,
  "failedTests": 0
}
