{
  "id": 1,
  "slug": "two-sum",
  "title": "Two Sum",
  "tags": [
    "array",
    "hash-table"
  ],
  "difficulty": "easy",
  "solutions": [
    {
      "name": "hashMapSolution",
      "description": "",
      "approach": "- Use a hash map to store number -> index mappings\n - For each number, check if its complement (target - number) exists in the map\n - If found, return the indices; otherwise, store current number and index",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "code": "<pre class=\"shiki github-dark\" style=\"background-color: #24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">seen</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Map</span><span style=\"color: #E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">for</span><span style=\"color: #E1E4E8\"> (</span><span style=\"color: #F97583\">let</span><span style=\"color: #E1E4E8\"> i </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">; i </span><span style=\"color: #F97583\">&lt;</span><span style=\"color: #E1E4E8\"> nums.</span><span style=\"color: #79B8FF\">length</span><span style=\"color: #E1E4E8\">; i</span><span style=\"color: #F97583\">++</span><span style=\"color: #E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">num</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> nums[i];</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">complement</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> target </span><span style=\"color: #F97583\">-</span><span style=\"color: #E1E4E8\"> num;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\"> (seen.</span><span style=\"color: #B392F0\">has</span><span style=\"color: #E1E4E8\">(complement)) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> [seen.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(complement), i];</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  seen.</span><span style=\"color: #B392F0\">set</span><span style=\"color: #E1E4E8\">(num, i);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> [];</span></span></code></pre>",
      "utilities": [],
      "testResults": [
        {
          "input": [
            [
              2,
              7,
              11,
              15
            ],
            9
          ],
          "expected": [
            0,
            1
          ],
          "name": "Example 1",
          "actual": [
            0,
            1
          ],
          "passed": true,
          "duration": 0.18958299999997053
        },
        {
          "input": [
            [
              3,
              2,
              4
            ],
            6
          ],
          "expected": [
            1,
            2
          ],
          "name": "Example 2",
          "actual": [
            1,
            2
          ],
          "passed": true,
          "duration": 0.08924999999999272
        },
        {
          "input": [
            [
              3,
              3
            ],
            6
          ],
          "expected": [
            0,
            1
          ],
          "name": "Example 3",
          "actual": [
            0,
            1
          ],
          "passed": true,
          "duration": 0.012125000000082764
        },
        {
          "input": [
            [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10
            ],
            19
          ],
          "expected": [
            8,
            9
          ],
          "name": "Large array case",
          "actual": [
            8,
            9
          ],
          "passed": true,
          "duration": 0.01595899999995254
        },
        {
          "input": [
            [
              -1,
              -2,
              -3,
              -4,
              -5,
              -6,
              -7,
              -8,
              -9,
              -10
            ],
            -19
          ],
          "expected": [
            8,
            9
          ],
          "name": "Negative numbers case",
          "actual": [
            8,
            9
          ],
          "passed": true,
          "duration": 0.07833400000004076
        },
        {
          "input": [
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            0
          ],
          "expected": [
            0,
            1
          ],
          "name": "Zero case",
          "actual": [
            0,
            1
          ],
          "passed": true,
          "duration": 0.07054200000004585
        }
      ],
      "totalTests": 6,
      "passedTests": 6,
      "failedTests": 0
    },
    {
      "name": "twoPointersSolution",
      "description": "",
      "approach": "- Sort the array\n - Use two pointers to find the two numbers\n - If the sum of the two numbers is equal to the target, return the indices; otherwise, move the pointers",
      "timeComplexity": "O(n log n)",
      "spaceComplexity": "O(1)",
      "code": "<pre class=\"shiki github-dark\" style=\"background-color: #24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">sortedNums</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> nums.</span><span style=\"color: #B392F0\">slice</span><span style=\"color: #E1E4E8\">().</span><span style=\"color: #B392F0\">sort</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">a</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">b</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=&gt;</span><span style=\"color: #E1E4E8\"> a </span><span style=\"color: #F97583\">-</span><span style=\"color: #E1E4E8\"> b);</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">let</span><span style=\"color: #E1E4E8\"> left </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">let</span><span style=\"color: #E1E4E8\"> right </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> sortedNums.</span><span style=\"color: #79B8FF\">length</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">-</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">1</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">while</span><span style=\"color: #E1E4E8\"> (left </span><span style=\"color: #F97583\">&lt;</span><span style=\"color: #E1E4E8\"> right) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">sum</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> sortedNums[left] </span><span style=\"color: #F97583\">+</span><span style=\"color: #E1E4E8\"> sortedNums[right];</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\"> (sum </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> target) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\"> (sortedNums[left] </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> sortedNums[right]) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">index</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> nums.</span><span style=\"color: #B392F0\">indexOf</span><span style=\"color: #E1E4E8\">(sortedNums[left]);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> [</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        nums.</span><span style=\"color: #B392F0\">indexOf</span><span style=\"color: #E1E4E8\">(sortedNums[left]),</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        nums.</span><span style=\"color: #B392F0\">indexOf</span><span style=\"color: #E1E4E8\">(sortedNums[right], index </span><span style=\"color: #F97583\">+</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">1</span><span style=\"color: #E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      ];</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">index1</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> nums.</span><span style=\"color: #B392F0\">indexOf</span><span style=\"color: #E1E4E8\">(sortedNums[left]);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">index2</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> nums.</span><span style=\"color: #B392F0\">indexOf</span><span style=\"color: #E1E4E8\">(sortedNums[right]);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> index1 </span><span style=\"color: #F97583\">&lt;</span><span style=\"color: #E1E4E8\"> index2 </span><span style=\"color: #F97583\">?</span><span style=\"color: #E1E4E8\"> [index1, index2] </span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> [index2, index1];</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\"> (sum </span><span style=\"color: #F97583\">&lt;</span><span style=\"color: #E1E4E8\"> target) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    left</span><span style=\"color: #F97583\">++</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  } </span><span style=\"color: #F97583\">else</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    right</span><span style=\"color: #F97583\">--</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> [];</span></span></code></pre>",
      "utilities": [],
      "testResults": [
        {
          "input": [
            [
              2,
              7,
              11,
              15
            ],
            9
          ],
          "expected": [
            0,
            1
          ],
          "name": "Example 1",
          "actual": [
            0,
            1
          ],
          "passed": true,
          "duration": 0.04975000000001728
        },
        {
          "input": [
            [
              3,
              2,
              4
            ],
            6
          ],
          "expected": [
            1,
            2
          ],
          "name": "Example 2",
          "actual": [
            1,
            2
          ],
          "passed": true,
          "duration": 0.004500000000007276
        },
        {
          "input": [
            [
              3,
              3
            ],
            6
          ],
          "expected": [
            0,
            1
          ],
          "name": "Example 3",
          "actual": [
            0,
            1
          ],
          "passed": true,
          "duration": 0.005084000000010747
        },
        {
          "input": [
            [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10
            ],
            19
          ],
          "expected": [
            8,
            9
          ],
          "name": "Large array case",
          "actual": [
            8,
            9
          ],
          "passed": true,
          "duration": 0.01020800000003419
        },
        {
          "input": [
            [
              -1,
              -2,
              -3,
              -4,
              -5,
              -6,
              -7,
              -8,
              -9,
              -10
            ],
            -19
          ],
          "expected": [
            8,
            9
          ],
          "name": "Negative numbers case",
          "actual": [
            8,
            9
          ],
          "passed": true,
          "duration": 0.0059160000000701984
        },
        {
          "input": [
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            0
          ],
          "expected": [
            0,
            1
          ],
          "name": "Zero case",
          "actual": [
            0,
            1
          ],
          "passed": true,
          "duration": 0.00691699999993034
        }
      ],
      "totalTests": 6,
      "passedTests": 6,
      "failedTests": 0
    }
  ],
  "notes": "<ul>\n<li><ol>\n<li>Two Sum</li>\n</ol>\n</li>\n<li></li>\n<li>Difficulty: easy</li>\n<li>Tags: array, hash-table</li>\n<li></li>\n<li>Description:</li>\n<li>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</li>\n<li></li>\n<li>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</li>\n<li></li>\n<li>You can return the answer in any order.</li>\n<li></li>\n<li>Examples:</li>\n<li><ol>\n<li>Input: nums = [2,7,11,15], target = 9</li>\n</ol>\n</li>\n<li>Output: [0,1]</li>\n<li>Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</li>\n<li><ol start=\"2\">\n<li>Input: nums = [3,2,4], target = 6</li>\n</ol>\n</li>\n<li>Output: [1,2]</li>\n<li><ol start=\"3\">\n<li>Input: nums = [3,3], target = 6</li>\n</ol>\n</li>\n<li>Output: [0,1]</li>\n<li></li>\n<li>Constraints:</li>\n<li><ul>\n<li><code>2 &lt;= nums.length &lt;= 104</code></li>\n</ul>\n</li>\n<li><ul>\n<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>\n</ul>\n</li>\n<li><ul>\n<li><code>-109 &lt;= target &lt;= 109</code></li>\n</ul>\n</li>\n<li><ul>\n<li>Only one valid answer exists.</li>\n</ul>\n</li>\n<li></li>\n<li>Follow-up:</li>\n<li><ul>\n<li>Can you come up with an algorithm that is less than <code>O(n2)</code> time complexity?</li>\n</ul>\n</li>\n</ul>\n",
  "totalTests": 12,
  "passedTests": 12,
  "failedTests": 0
}