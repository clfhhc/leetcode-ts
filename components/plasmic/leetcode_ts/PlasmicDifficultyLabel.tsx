// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WsMcki2ZLTk8QRowXDdYK
// Component: RLfjfL5lSL
import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from '../my_project/plasmic_my_project.module.css'; // plasmic-import: 7WsMcki2ZLTk8QRowXDdYK/projectcss
import sty from './PlasmicDifficultyLabel.module.css'; // plasmic-import: RLfjfL5lSL/css

export type PlasmicDifficultyLabel__VariantMembers = {
  difficulty: 'medium' | 'easy' | 'hard';
};

export type PlasmicDifficultyLabel__VariantsArgs = {
  difficulty?: SingleChoiceArg<'medium' | 'easy' | 'hard'>;
};

type VariantPropType = keyof PlasmicDifficultyLabel__VariantsArgs;
export const PlasmicDifficultyLabel__VariantProps = new Array<VariantPropType>(
  'difficulty'
);

export type PlasmicDifficultyLabel__ArgsType = {};
type ArgPropType = keyof PlasmicDifficultyLabel__ArgsType;
export const PlasmicDifficultyLabel__ArgProps = new Array<ArgPropType>();

export type PlasmicDifficultyLabel__OverridesType = {
  root?: p.Flex<'div'>;
  span?: p.Flex<'span'>;
};

export interface DefaultDifficultyLabelProps {
  difficulty?: SingleChoiceArg<'medium' | 'easy' | 'hard'>;
  className?: string;
}

function PlasmicDifficultyLabel__RenderFunc(props: {
  variants: PlasmicDifficultyLabel__VariantsArgs;
  args: PlasmicDifficultyLabel__ArgsType;
  overrides: PlasmicDifficultyLabel__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <span
        data-plasmic-name={'span'}
        data-plasmic-override={overrides.span}
        className={classNames(
          projectcss.all,
          projectcss.span,
          projectcss.__wab_text,
          sty.span,
          {
            [sty.spandifficulty_easy]: hasVariant(
              variants,
              'difficulty',
              'easy'
            ),
            [sty.spandifficulty_hard]: hasVariant(
              variants,
              'difficulty',
              'hard'
            ),
            [sty.spandifficulty_medium]: hasVariant(
              variants,
              'difficulty',
              'medium'
            ),
          }
        )}
      >
        {hasVariant(variants, 'difficulty', 'hard')
          ? 'Hard'
          : hasVariant(variants, 'difficulty', 'easy')
          ? 'Easy'
          : hasVariant(variants, 'difficulty', 'medium')
          ? 'Medium'
          : 'Enter some text'}
      </span>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'span'],
  span: ['span'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  span: 'span';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDifficultyLabel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDifficultyLabel__VariantsArgs;
    args?: PlasmicDifficultyLabel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDifficultyLabel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDifficultyLabel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDifficultyLabel__ArgProps,
      internalVariantPropNames: PlasmicDifficultyLabel__VariantProps,
    });

    return PlasmicDifficultyLabel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicDifficultyLabel';
  } else {
    func.displayName = `PlasmicDifficultyLabel.${nodeName}`;
  }
  return func;
}

export const PlasmicDifficultyLabel = Object.assign(
  // Top-level PlasmicDifficultyLabel renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    span: makeNodeComponent('span'),

    // Metadata about props expected for PlasmicDifficultyLabel
    internalVariantProps: PlasmicDifficultyLabel__VariantProps,
    internalArgProps: PlasmicDifficultyLabel__ArgProps,
  }
);

export default PlasmicDifficultyLabel;
/* prettier-ignore-end */
