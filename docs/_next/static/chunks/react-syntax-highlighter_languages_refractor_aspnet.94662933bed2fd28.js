"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8030,3318],{3386:function(b,d,c){var e=c(2025);function a(a){a.register(e),a.languages.aspnet=a.languages.extend("markup",{"page-directive":{pattern:/<%\s*@.*%>/,alias:"tag",inside:{"page-directive":{pattern:/<%\s*@\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,alias:"tag"},rest:a.languages.markup.tag.inside}},directive:{pattern:/<%.*%>/,alias:"tag",inside:{directive:{pattern:/<%\s*?[$=%#:]{0,2}|%>/,alias:"tag"},rest:a.languages.csharp}}}),a.languages.aspnet.tag.pattern=/<(?!%)\/?[^\s>\/]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/,a.languages.insertBefore("inside","punctuation",{directive:a.languages.aspnet.directive},a.languages.aspnet.tag.inside["attr-value"]),a.languages.insertBefore("aspnet","comment",{"asp-comment":{pattern:/<%--[\s\S]*?--%>/,alias:["asp","comment"]}}),a.languages.insertBefore("aspnet",a.languages.javascript?"script":"tag",{"asp-script":{pattern:/(<script(?=.*runat=['"]?server\b)[^>]*>)[\s\S]*?(?=<\/script>)/i,lookbehind:!0,alias:["asp","script"],inside:a.languages.csharp||{}}})}b.exports=a,a.displayName="aspnet",a.aliases=[]},2025:function(b){function a(a){!function(c){function b(a,b){return a.replace(/<<(\d+)>>/g,function(c,a){return"(?:"+b[+a]+")"})}function a(a,c,d){return RegExp(b(a,c),d||"")}function i(a,c){for(var b=0;b<c;b++)a=a.replace(/<<self>>/g,function(){return"(?:"+a+")"});return a.replace(/<<self>>/g,"[^\\s\\S]")}var d={type:"bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void",typeDeclaration:"class enum interface record struct",contextual:"add alias and ascending async await by descending from(?=\\s*(?:\\w|$)) get global group into init(?=\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\s*{)",other:"abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield"};function j(a){return"\\b(?:"+a.trim().replace(/ /g,"|")+")\\b"}var p=j(d.typeDeclaration),k=RegExp(j(d.type+" "+d.typeDeclaration+" "+d.contextual+" "+d.other)),C=j(d.typeDeclaration+" "+d.contextual+" "+d.other),D=j(d.type+" "+d.typeDeclaration+" "+d.other),l=i(/<(?:[^<>;=+\-*/%&|^]|<<self>>)*>/.source,2),m=i(/\((?:[^()]|<<self>>)*\)/.source,2),f=/@?\b[A-Za-z_]\w*\b/.source,n=b(/<<0>>(?:\s*<<1>>)?/.source,[f,l]),g=b(/(?!<<0>>)<<1>>(?:\s*\.\s*<<1>>)*/.source,[C,n]),o=/\[\s*(?:,\s*)*\]/.source,E=b(/<<0>>(?:\s*(?:\?\s*)?<<1>>)*(?:\s*\?)?/.source,[g,o]),F=b(/[^,()<>[\];=+\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source,[l,m,o]),G=b(/\(<<0>>+(?:,<<0>>+)+\)/.source,[F]),h=b(/(?:<<0>>|<<1>>)(?:\s*(?:\?\s*)?<<2>>)*(?:\s*\?)?/.source,[G,g,o]),e={keyword:k,punctuation:/[<>()?,.:[\]]/},q=/'(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'/.source,r=/"(?:\\.|[^\\"\r\n])*"/.source,H=/@"(?:""|\\[\s\S]|[^\\"])*"(?!")/.source;c.languages.csharp=c.languages.extend("clike",{string:[{pattern:a(/(^|[^$\\])<<0>>/.source,[H]),lookbehind:!0,greedy:!0},{pattern:a(/(^|[^@$\\])<<0>>/.source,[r]),lookbehind:!0,greedy:!0}],"class-name":[{pattern:a(/(\busing\s+static\s+)<<0>>(?=\s*;)/.source,[g]),lookbehind:!0,inside:e},{pattern:a(/(\busing\s+<<0>>\s*=\s*)<<1>>(?=\s*;)/.source,[f,h]),lookbehind:!0,inside:e},{pattern:a(/(\busing\s+)<<0>>(?=\s*=)/.source,[f]),lookbehind:!0},{pattern:a(/(\b<<0>>\s+)<<1>>/.source,[p,n]),lookbehind:!0,inside:e},{pattern:a(/(\bcatch\s*\(\s*)<<0>>/.source,[g]),lookbehind:!0,inside:e},{pattern:a(/(\bwhere\s+)<<0>>/.source,[f]),lookbehind:!0},{pattern:a(/(\b(?:is(?:\s+not)?|as)\s+)<<0>>/.source,[E]),lookbehind:!0,inside:e},{pattern:a(/\b<<0>>(?=\s+(?!<<1>>|with\s*\{)<<2>>(?:\s*[=,;:{)\]]|\s+(?:in|when)\b))/.source,[h,D,f]),inside:e}],keyword:k,number:/(?:\b0(?:x[\da-f_]*[\da-f]|b[01_]*[01])|(?:\B\.\d+(?:_+\d+)*|\b\d+(?:_+\d+)*(?:\.\d+(?:_+\d+)*)?)(?:e[-+]?\d+(?:_+\d+)*)?)(?:[dflmu]|lu|ul)?\b/i,operator:/>>=?|<<=?|[-=]>|([-+&|])\1|~|\?\?=?|[-+*/%&|^!=<>]=?/,punctuation:/\?\.?|::|[{}[\];(),.:]/}),c.languages.insertBefore("csharp","number",{range:{pattern:/\.\./,alias:"operator"}}),c.languages.insertBefore("csharp","punctuation",{"named-parameter":{pattern:a(/([(,]\s*)<<0>>(?=\s*:)/.source,[f]),lookbehind:!0,alias:"punctuation"}}),c.languages.insertBefore("csharp","class-name",{namespace:{pattern:a(/(\b(?:namespace|using)\s+)<<0>>(?:\s*\.\s*<<0>>)*(?=\s*[;{])/.source,[f]),lookbehind:!0,inside:{punctuation:/\./}},"type-expression":{pattern:a(/(\b(?:default|sizeof|typeof)\s*\(\s*(?!\s))(?:[^()\s]|\s(?!\s)|<<0>>)*(?=\s*\))/.source,[m]),lookbehind:!0,alias:"class-name",inside:e},"return-type":{pattern:a(/<<0>>(?=\s+(?:<<1>>\s*(?:=>|[({]|\.\s*this\s*\[)|this\s*\[))/.source,[h,g]),inside:e,alias:"class-name"},"constructor-invocation":{pattern:a(/(\bnew\s+)<<0>>(?=\s*[[({])/.source,[h]),lookbehind:!0,inside:e,alias:"class-name"},"generic-method":{pattern:a(/<<0>>\s*<<1>>(?=\s*\()/.source,[f,l]),inside:{function:a(/^<<0>>/.source,[f]),generic:{pattern:RegExp(l),alias:"class-name",inside:e}}},"type-list":{pattern:a(/\b((?:<<0>>\s+<<1>>|record\s+<<1>>\s*<<5>>|where\s+<<2>>)\s*:\s*)(?:<<3>>|<<4>>|<<1>>\s*<<5>>|<<6>>)(?:\s*,\s*(?:<<3>>|<<4>>|<<6>>))*(?=\s*(?:where|[{;]|=>|$))/.source,[p,n,f,h,k.source,m,/\bnew\s*\(\s*\)/.source]),lookbehind:!0,inside:{"record-arguments":{pattern:a(/(^(?!new\s*\()<<0>>\s*)<<1>>/.source,[n,m]),lookbehind:!0,greedy:!0,inside:c.languages.csharp},keyword:k,"class-name":{pattern:RegExp(h),greedy:!0,inside:e},punctuation:/[,()]/}},preprocessor:{pattern:/(^[\t ]*)#.*/m,lookbehind:!0,alias:"property",inside:{directive:{pattern:/(#)\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\b/,lookbehind:!0,alias:"keyword"}}}});var s=r+"|"+q,t=b(/\/(?![*/])|\/\/[^\r\n]*[\r\n]|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>/.source,[s]),u=i(b(/[^"'/()]|<<0>>|\(<<self>>*\)/.source,[t]),2),v=/\b(?:assembly|event|field|method|module|param|property|return|type)\b/.source,I=b(/<<0>>(?:\s*\(<<1>>*\))?/.source,[g,u]);c.languages.insertBefore("csharp","class-name",{attribute:{pattern:a(/((?:^|[^\s\w>)?])\s*\[\s*)(?:<<0>>\s*:\s*)?<<1>>(?:\s*,\s*<<1>>)*(?=\s*\])/.source,[v,I]),lookbehind:!0,greedy:!0,inside:{target:{pattern:a(/^<<0>>(?=\s*:)/.source,[v]),alias:"keyword"},"attribute-arguments":{pattern:a(/\(<<0>>*\)/.source,[u]),inside:c.languages.csharp},"class-name":{pattern:RegExp(g),inside:{punctuation:/\./}},punctuation:/[:,]/}}});var w=/:[^}\r\n]+/.source,x=i(b(/[^"'/()]|<<0>>|\(<<self>>*\)/.source,[t]),2),y=b(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source,[x,w]),z=i(b(/[^"'/()]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>|\(<<self>>*\)/.source,[s]),2),A=b(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source,[z,w]);function B(b,d){return{interpolation:{pattern:a(/((?:^|[^{])(?:\{\{)*)<<0>>/.source,[b]),lookbehind:!0,inside:{"format-string":{pattern:a(/(^\{(?:(?![}:])<<0>>)*)<<1>>(?=\}$)/.source,[d,w]),lookbehind:!0,inside:{punctuation:/^:/}},punctuation:/^\{|\}$/,expression:{pattern:/[\s\S]+/,alias:"language-csharp",inside:c.languages.csharp}}},string:/[\s\S]+/}}c.languages.insertBefore("csharp","string",{"interpolation-string":[{pattern:a(/(^|[^\\])(?:\$@|@\$)"(?:""|\\[\s\S]|\{\{|<<0>>|[^\\{"])*"/.source,[y]),lookbehind:!0,greedy:!0,inside:B(y,x)},{pattern:a(/(^|[^@\\])\$"(?:\\.|\{\{|<<0>>|[^\\"{])*"/.source,[A]),lookbehind:!0,greedy:!0,inside:B(A,z)}],char:{pattern:RegExp(q),greedy:!0}}),c.languages.dotnet=c.languages.cs=c.languages.csharp}(a)}b.exports=a,a.displayName="csharp",a.aliases=["dotnet","cs"]}}])