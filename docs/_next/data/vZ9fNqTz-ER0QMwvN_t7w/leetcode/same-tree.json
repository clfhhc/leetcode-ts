{"pageProps":{"solutionContent":"/* solution start */\n\n/**\n * Definition for a binary tree node.\n */\nclass TreeNode {\n  val: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n  constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n    this.val = val === undefined ? 0 : val;\n    this.left = left === undefined ? null : left;\n    this.right = right === undefined ? null : right;\n  }\n}\n\nfunction isSameValue(p: TreeNode | null, q: TreeNode | null): boolean {\n  if (!p && !q) {\n    return true;\n  }\n  if (!p || !q) {\n    return false;\n  }\n  if (p.val !== q.val) {\n    return false;\n  }\n  return true;\n}\n\nfunction isSameTree(p: TreeNode | null, q: TreeNode | null): boolean {\n  const queueP = [p];\n  const queueQ = [q];\n\n  let pointerP: TreeNode | null;\n  let pointerQ: TreeNode | null;\n  while (queueP.length) {\n    pointerP = queueP.shift() as TreeNode | null;\n    pointerQ = queueQ.shift() as TreeNode | null;\n\n    if (!isSameValue(pointerP, pointerQ)) {\n      return false;\n    }\n    if (pointerP !== null) {\n      queueP.push((pointerP as TreeNode).left, (pointerP as TreeNode).right);\n      queueQ.push((pointerQ as TreeNode).left, (pointerQ as TreeNode).right);\n    }\n  }\n  return true;\n}\n\n/* solution end */","questionData":{"questionId":"100","title":"Same Tree","titleSlug":"same-tree","content":"<p>Given the roots of two binary trees <code>p</code> and <code>q</code>, write a function to check if they are the same or not.</p>\n\n<p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg\" style=\"width: 622px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> p = [1,2,3], q = [1,2,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg\" style=\"width: 382px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> p = [1,2], q = [1,null,2]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg\" style=\"width: 622px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> p = [1,2,1], q = [1,1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in both trees is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n","translatedTitle":null,"translatedContent":null,"isPaidOnly":false,"difficulty":"Easy","similarQuestions":"[]","exampleTestcases":"[1,2,3]\n[1,2,3]\n[1,2]\n[1,null,2]\n[1,2,1]\n[1,1,2]","categoryTitle":"Algorithms","questionDetailUrl":"/problems/same-tree/","topicTags":[{"id":"VG9waWNUYWdOb2RlOjIw","name":"Tree","slug":"tree","__typename":"TopicTagNode"},{"id":"VG9waWNUYWdOb2RlOjIx","name":"Depth-First Search","slug":"depth-first-search","__typename":"TopicTagNode"},{"id":"VG9waWNUYWdOb2RlOjIy","name":"Breadth-First Search","slug":"breadth-first-search","__typename":"TopicTagNode"},{"id":"VG9waWNUYWdOb2RlOjYxMDU3","name":"Binary Tree","slug":"binary-tree","__typename":"TopicTagNode"}],"stats":"{\"totalAccepted\": \"1M\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 1017846, \"totalSubmissionRaw\": 1833618, \"acRate\": \"55.5%\"}","hints":[],"__typename":"QuestionNode"},"urqlState":{}},"__N_SSG":true}